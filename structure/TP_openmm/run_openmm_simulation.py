# This script was generated by OpenMM-Setup on 2018-11-23.

from simtk.openmm import *
from simtk.openmm.app import *
from simtk.unit import *

# Input Files

pdb = PDBFile('1mlw-processed.pdb')
forcefield = ForceField('charmm36.xml', 'charmm36/water.xml')

# System Configuration

nonbondedMethod = CutoffPeriodic
nonbondedCutoff = 0.5*nanometers
constraints = None
rigidWater = False

# Integration Options

dt = 0.01*picoseconds
temperature = 300*kelvin
friction = 0/picosecond
pressure = 1*atmospheres
barostatInterval = 1

# Simulation Options

steps = 1000
equilibrationSteps = 40
platform = Platform.getPlatformByName('Reference')
dcdReporter = DCDReporter('1mlw_output.dcd', 1)
dataReporter = StateDataReporter('1mlw_output.log', 1, totalSteps=steps,
    step=True, time=True, speed=True, progress=True, elapsedTime=True, remainingTime=True, potentialEnergy=True, kineticEnergy=True, totalEnergy=True, temperature=True, volume=True, density=True, separator='\t')

# Prepare the Simulation

print('Building system...')
topology = pdb.topology
positions = pdb.positions
system = forcefield.createSystem(topology, nonbondedMethod=nonbondedMethod, nonbondedCutoff=nonbondedCutoff,
    constraints=constraints, rigidWater=rigidWater)
system.addForce(MonteCarloBarostat(pressure, temperature, barostatInterval))
integrator = LangevinIntegrator(temperature, friction, dt)
simulation = Simulation(topology, system, integrator, platform)
simulation.context.setPositions(positions)

# Minimize and Equilibrate

print('Performing energy minimization...')
simulation.minimizeEnergy()
print('Equilibrating...')
simulation.context.setVelocitiesToTemperature(temperature)
simulation.step(equilibrationSteps)

# Simulate

print('Simulating...')
simulation.reporters.append(dcdReporter)
simulation.reporters.append(dataReporter)
simulation.currentStep = 0
simulation.step(steps)